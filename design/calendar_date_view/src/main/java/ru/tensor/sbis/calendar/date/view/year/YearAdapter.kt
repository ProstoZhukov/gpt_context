package ru.tensor.sbis.calendar.date.view.year

import android.annotation.SuppressLint
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import org.joda.time.DateTimeConstants
import org.joda.time.LocalDate
import ru.tensor.sbis.calendar.date.R
import ru.tensor.sbis.calendar.date.data.Day
import ru.tensor.sbis.calendar.date.data.EventType
import ru.tensor.sbis.calendar.date.utils.asMonthString
import ru.tensor.sbis.calendar.date.view.DayViewHolder
import ru.tensor.sbis.calendar.date.view.SelectedDayDrawable
import ru.tensor.sbis.calendar.date.view.day.DayView
import ru.tensor.sbis.calendar.date.view.selector.AdapterNotifier
import ru.tensor.sbis.calendar.date.view.selector.NoSelector
import ru.tensor.sbis.calendar.date.view.selector.Selector
import ru.tensor.sbis.design.utils.delegatePropertyMT
import java.util.*
import java.util.concurrent.ConcurrentHashMap

/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫—Ä–æ–ª—è—â–µ–≥–æ—Å—è –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è
 * –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–Ω –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–µ–Ω, –∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1990 –≥–æ–¥–∞, –æ—Ç —ç—Ç–æ —Ç–æ—á–∫–∏ –∏–¥—ë—Ç –æ—Ç—Å—á—ë—Ç –¥–Ω–µ–π –∏ —Å–º–µ—â–µ–Ω–∏–π –¥–Ω–µ–π
 *
 *  –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –¥–∞—Ç–∞, —Å —É—á—ë—Ç–æ–º –¥–∞—Ç, –ø—É—Å—Ç—ã—Ö –º–µ—Å—Ç –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
 *
 *  –ê–≤–≥—É—Å—Ç'20               <- 0 position
 *  ùö°ùö°|ùö°ùö°|ùö°ùö°|ùö°ùö°|ùö°ùö°|ùü∂ùü∑|ùü∂ùü∏    <- 1-7 position
 *  ùü∂ùüπ|ùü∂ùü∫|ùü∂ùüª|ùü∂ùüº|ùü∂ùüΩ|ùü∂ùüæ|ùü∂ùüø
 *  ùü∑ùü∂|ùü∑ùü∑|ùü∑ùü∏|ùü∑ùüπ|ùü∑ùü∫|ùü∑ùüª|ùü∑ùüº
 *  ùü∑ùüΩ|ùü∑ùüæ|ùü∑ùüø|ùü∏ùü∂|ùü∏ùü∑|ùü∏ùü∏|ùü∏ùüπ
 *  ùü∏ùü∫|ùü∏ùüª|ùü∏ùüº|ùü∏ùüΩ|ùü∏ùüæ|ùü∏ùüø|ùüπùü∂
 *  31|ùö°ùö°|ùö°ùö°|ùö°ùö°|ùö°ùö°|ùö°ùö°|ùö°ùö°    <- 29-35 position
 *  –°–µ–Ω—Ç—è–±—Ä—å'20             <- 36 position
 *  ùö°ùö°|01|02|03|04|05|06    <- 37... position
 *
 * @see YearAdapterDayPositionCalculator
 */
internal class YearAdapter(var drawBackgroundUsualDay: Boolean = true) : RecyclerView.Adapter<RecyclerView.ViewHolder>(),
    AdapterNotifier {

    var selectedDates by delegatePropertyMT({ selector.selectedDates }, { selector.selectedDates = it })
    var selector: Selector = NoSelector()

    lateinit var selectedDayDrawable: SelectedDayDrawable

    private val _data = ConcurrentHashMap<LocalDate, Day>()
    var data: Map<LocalDate, Day> = _data
        set(value) {
            _data.putAll(value)
        }

    private var yearAdapterDayPositionCalculator = YearAdapterDayPositionCalculator(initDays = DAYS_COUNT)
    private val now = LocalDate.now()

    /**
     * –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—ç—à–µ–π –∫–ª–∞—Å—Å–∞ [YearAdapterDayPositionCalculator]
     */
    fun preCountSpan() {
        yearAdapterDayPositionCalculator.preCountSpan()
    }

    override fun getItemViewType(position: Int): Int {
        yearAdapterDayPositionCalculator.monthByPosition(position).let {
            return if (position == it.daysBefore) VIEW_TYPE_MONTH_NAME else VIEW_TYPE_DAY
        }
    }

    override fun getItemCount() = yearAdapterDayPositionCalculator.maxDays
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {
        return if (viewType == VIEW_TYPE_MONTH_NAME) {
            MonthNameViewHolder(parent)
        } else {
            DayViewHolder(DayView(parent.context).apply {
                layoutParams = RecyclerView.LayoutParams(
                    ViewGroup.MarginLayoutParams.MATCH_PARENT,
                    resources.getDimensionPixelSize(R.dimen.calendar_year_month_month_height)
                )
                dateTextSize = resources.getDimension(R.dimen.calendar_year_picker_day_text_size)
            })
        }
    }

    /**
     * –ó–∞–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É [firstDate] –∞–¥–∞–ø—Ç–µ—Ä–∞
     */
    @SuppressLint("NotifyDataSetChanged")
    fun setFirstDate(firstDate: LocalDate, lastDate: LocalDate?) {
        yearAdapterDayPositionCalculator = YearAdapterDayPositionCalculator(firstDate, lastDate = lastDate)
        notifyDataSetChanged()
    }

    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
        val (year, monthOfYear, dayOfMonth, daysCount) = yearAdapterDayPositionCalculator.monthByPosition(position)
        val month = LocalDate(year, monthOfYear, dayOfMonth)

        if (getItemViewType(position) == VIEW_TYPE_MONTH_NAME) {  // label
            holder as MonthNameViewHolder
            holder.bind(
                month.asMonthString(now)
                    .replaceFirstChar {
                        if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString()
                    }
            )
        } else {
            holder as DayViewHolder
            holder.drawBackgroundUsualDay = drawBackgroundUsualDay
            val offsetDays = month.dayOfWeek - 1
            val currentDay = position - daysCount - offsetDays

            when {
                currentDay > month.dayOfMonth().maximumValue -> {
                    holder.clear(); return
                }
                position < offsetDays                        -> {
                    holder.clear(); return
                }
                currentDay <= 0                              -> {
                    holder.clear(); return
                }
            }

            val localDate = LocalDate(year, monthOfYear, currentDay)
            val model = data[localDate]
            when {
                model != null -> holder.bind(model, selector, selectedDayDrawable)
                else -> holder.bind(
                    Day(
                        date = localDate,
                        type = if (localDate.dayOfWeek > DateTimeConstants.FRIDAY) EventType.DAY_OFF else EventType.WORKDAY
                    ),
                    selector,
                    selectedDayDrawable
                )
            }
        }
    }

    /**
     * –ò–Ω–¥–µ–∫—Å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ [localDate]
     */
    fun indexOfMonth(localDate: LocalDate): Int = yearAdapterDayPositionCalculator.indexOfMonth(localDate)

    /**
     * –ò–Ω–¥–µ–∫—Å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ [localDate]
     */
    fun indexOfDay(localDate: LocalDate): Int = yearAdapterDayPositionCalculator.indexOfDay(localDate)

    /**
     * –ú–µ—Å—è—Ü –ø–æ –ø–æ–∑–∏—Ü–∏–∏ [position]
     */
    fun monthByPosition(position: Int) = yearAdapterDayPositionCalculator.monthByPosition(position)

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ [map], —É–≤–µ–¥–æ–º–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —Ö–æ–ª–¥–µ—Ä—ã
     * –ù–∞—á–∞–ª—å–Ω–∞—è –≤–∏–¥–∏–º–∞—è –ø–æ–∑–∏—Ü–∏—è [firstVisible] –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–∏–¥–∏–º–∞—è –ø–æ–∑–∏—Ü–∏—è [lastVisible]
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö "–ø–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∞–¥–∞–ø—Ç–µ—Ä–µ", "–∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥—è–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è", "—Å–ø–∏—Å–æ–∫ –ø–∞—Ä (–ø–æ–∑–∏—Ü–∏—è —è—á–µ–π–∫–∏, –Ω–∞–¥–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —è—á–µ–π–∫—É)"
     */
    fun updateData(map: Map<LocalDate, Day>, firstVisible: Int, lastVisible: Int): NotifyList {
        fun isNotDefaultCell(it: Day): Boolean =
            it.isHoliday
                    || it.type != EventType.WORKDAY
                    || it.backgroundColor != "#EDF4FC"
                    || it.dayActivitiesPaintingList.isNotEmpty()
                    || it.isUnwantedVacDay

        val keys = map.keys.toTypedArray()
        val firstIndex = yearAdapterDayPositionCalculator.indexOfDay(keys.first())
        val lastIndex = yearAdapterDayPositionCalculator.indexOfDay(keys.last())
        if (keys.isNotEmpty() && (firstIndex in firstVisible..lastVisible || lastIndex in firstVisible..lastVisible || firstIndex < firstVisible && lastIndex > lastVisible)) {
            val list = map.map { entry -> Pair(yearAdapterDayPositionCalculator.indexOfDay(entry.key), isNotDefaultCell(entry.value) || data[entry.key]?.backgroundColor != entry.value.backgroundColor || data[entry.key]?.type != entry.value.type) }
            data = map
            return NotifyList(true, list)
        }
        data = map
        return NotifyList(false, null)
    }

    companion object {
        const val YEARS_THRESHOLD = 10
        internal const val DAYS_COUNT = 2 * YEARS_THRESHOLD * 365 // ~20 –ª–µ—Ç
        const val VIEW_TYPE_MONTH_NAME = 0
        const val VIEW_TYPE_DAY = 1
    }

}