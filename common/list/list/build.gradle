apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'submodule-cfg-plugin'

submoduleConfig { cfg ->
    cfg.enableBaseModuleCfg()
    cfg.enableOptimizeCodeCfg()
    cfg.enableFlavorsCfg()
    cfg.enableKaptCfg()
    cfg.enableDataBindingCfg()
    cfg.enableBuildConfigGeneration()
    if (rootProject.ext.ciBuild) {
        cfg.enableJacocoCfg()
    }
}

android {
    namespace "ru.tensor.sbis.list"

    defaultConfig {
        vectorDrawables.useSupportLibrary = true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    resourcePrefix 'list_'
}

dependencies {
    implementation project(':design')
    //api потому что пользователь модуля должен предоставить наследника класса от туда.
    api project(':design_stubview')
    implementation project(':design_progress')
    implementation project(':design_view_ext')
    implementation project(':list_utils')

    implementation "androidx.lifecycle:lifecycle-common-java8:${rootProject.ext.androidLifecycleCommon}"
    implementation "androidx.lifecycle:lifecycle-extensions:${rootProject.ext.androidLifecycleExtensions}"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:${rootProject.ext.androidLifecycleReactivestreams}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${rootProject.ext.androidLifecycleRuntime}"
    implementation "androidx.lifecycle:lifecycle-viewmodel:${rootProject.ext.androidLifecycleViewmodel}"

    implementation "com.jakewharton.timber:timber:$rootProject.ext.timberVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxVersion"
    implementation "androidx.fragment:fragment:$rootProject.ext.fragmentVersion"
    api project(path: ':lifecycle_compat')

    testImplementation project(":testing")
}