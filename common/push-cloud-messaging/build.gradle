import ru.tensor.gradle.subconfig.customization.feature.BinaryMode

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'submodule-cfg-plugin'

submoduleConfig { cfg ->
    cfg.enableBaseModuleCfg()
    cfg.enableFlavorsCfg()
    cfg.enableBuildConfigGeneration()
    cfg.enableFeatureSplit()
    if (rootProject.ext.ciBuild) {
        cfg.enableJacocoCfg()
    }
}

final Directory multiProcessDir = project
        .layout
        .projectDirectory
        .dir("src/main/build_variant/feature/push-notification-multi-process")

features {
    binaryFeature("push-notification-multi-process", BinaryMode.OFF) {
        variant(BinaryMode.ON) {
            main {
                android {
                    sourceSets.main {
                        final String manifestPath = rootProject.ext.isHmsBuild() ?
                                multiProcessDir.file("on/HuaweiAndroidManifest.xml") :
                                multiProcessDir.file("on/GoogleAndroidManifest.xml")

                        manifest.srcFile(manifestPath)
                    }
                }
            }
        }
        variant(BinaryMode.OFF) {
            main {
                android {
                    println "isHmsBuild = ${rootProject.ext.isHmsBuild()}"
                    sourceSets.main {
                        final String manifestPath = rootProject.ext.isHmsBuild() ?
                                multiProcessDir.file("off/HuaweiAndroidManifest.xml"):
                                multiProcessDir.file("off/GoogleAndroidManifest.xml")

                        manifest.srcFile(manifestPath)
                    }
                }
            }
        }
    }
}

android {
    namespace "ru.tensor.sbis.push_cloud_messaging"

    defaultConfig {
        consumerProguardFiles 'proguard-rules.pro'
        def pushServiceName
        if (rootProject.ext.isHmsBuild()) {
            pushServiceName = "android_hcm"
        } else {
            pushServiceName = "android_fcm"
        }
        buildConfigField "String", "PUSH_SERVICE_NAME", "\"${pushServiceName}\""
    }

    buildTypes {
        debug {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        getByName('main') {
            if (rootProject.ext.isHmsBuild()) {
                java.srcDirs = ['src/hms/java', 'src/main/java']
                res.srcDirs = ['src/hms/res', 'src/main/res']

                dependencies {
                    implementation project(':mobile-services-huawei')
                    implementation "com.huawei.hms:push:$rootProject.ext.huaweiPushVersion"
                }
            } else { // gms default
                java.srcDirs = ['src/gms/java', 'src/main/java']
                res.srcDirs = ['src/gms/res', 'src/main/res']

                dependencies {
                    implementation project(':mobile-services-google')
                    implementation platform("com.google.firebase:firebase-bom:$rootProject.ext.firebaseBomVersion")
                    implementation "com.google.firebase:firebase-messaging"
                    /**
                     * В версии FCM 20.0.0 был удален Firebase Instance ID API для управления
                     * регистрационными токенами. Подробнее смотреть тут
                     * https://firebase.google.com/support/release-notes/android#messaging_v22-0-0
                     *
                     * Добавил зависимость вручную, как рекомендовано в документации Firebase.
                     * (см. выше ту же ссылку)
                     */
                    implementation "com.google.firebase:firebase-iid:$rootProject.ext.firebaseIIDVersion"
                }
            }
        }
    }
}

dependencies {
    implementation project(':mobile-services-decl')
    implementation project(':app_init')
    implementation project(':entrypoint_guard')

    implementation "androidx.annotation:annotation:$rootProject.ext.annotationVersion"
    implementation "com.jakewharton.timber:timber:$rootProject.ext.timberVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
}
