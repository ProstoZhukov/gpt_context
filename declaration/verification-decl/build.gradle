apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'submodule-cfg-plugin'

submoduleConfig { cfg ->
    cfg.enableBaseModuleCfg()
    cfg.enableOptimizeCodeCfg()
    cfg.enableFlavorsCfg()
    cfg.enableDataBindingCfg()
    cfg.enableBuildConfigGeneration()
    cfg.enableResValuesInjecting()
}

android {
    namespace "ru.tensor.sbis.verification_decl"

    def appId = "${rootProject.ext.applicationId}"

    def accountType = rootProject.getProperties().get("accountType")

    if (accountType == null) {
        throw new IllegalStateException("accountType must be declared explicitly!")
    }

    buildTypes {
        debug {
            def mainAppId = "$appId${rootProject.ext.applicationDebugSuffix}"

            def debugAccountType = "$accountType${rootProject.ext.applicationDebugSuffix}"

            buildConfigField "String", "ACCOUNT_TYPE", "\"${debugAccountType}\""
            resValue "string", "account_type", "${debugAccountType}"

            buildConfigField "String", "CONTENT_AUTHORITY", "\"${mainAppId}.provider\""
            resValue "string", "content_authority", "${mainAppId}.provider"
        }
        release {
            def mainAppId = appId
            def releaseAccountType = accountType

            buildConfigField "String", "ACCOUNT_TYPE", "\"${releaseAccountType}\""
            resValue "string", "account_type", "${releaseAccountType}"

            buildConfigField "String", "CONTENT_AUTHORITY", "\"${mainAppId}.provider\""
            resValue "string", "content_authority", "${mainAppId}.provider"
        }
    }
}

dependencies {
    api project(':plugin_struct')

    implementation project(':settings-screen-decl')
    implementation project(':design')
    implementation project(':design_buttons')
    implementation project(':design_logo')
    implementation project(':entrypoint_guard')

    implementation libs.android.appcompat
    implementation libs.rx.java
}