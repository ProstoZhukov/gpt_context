package ru.tensor.sbis.edo_decl.document;

import android.os.Parcel;
import android.os.Parcelable;

import java.util.UUID;

import androidx.annotation.Nullable;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "DOCUMENT".
 */
public class Document implements Parcelable {

    private Long mId;
    private String mUuid;
    private String mDocumentId;
    @Nullable
    private UUID mDiskId;
    private DocumentType mType;
    private String mTitle;
    private Boolean mIsAccessible;
    @Nullable
    private String mLinkInfix;
    private String mName;
    private String mText;
    @Nullable
    private String mSubtype;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Document() {
    }

    public Document(Long id) {
        this.mId = id;
    }

    public Document(Long id, String uuid, String documentId, DocumentType type, String title, Boolean isAccessible) {
        mId = id;
        mUuid = uuid;
        mDocumentId = documentId;
        mType = type;
        mTitle = title;
        mIsAccessible = isAccessible;
    }

    public Long getId() {
        return mId;
    }

    public void setId(Long id) {
        this.mId = id;
    }

    public String getUuid() {
        return mUuid;
    }

    public void setUuid(String uuid) {
        this.mUuid = uuid;
    }

    public String getDocumentId() {
        return mDocumentId;
    }

    public void setDocumentId(String documentId) {
        this.mDocumentId = documentId;
    }

    @Nullable
    public UUID getDiskId() {
        return mDiskId;
    }

    public void setDiskId(@Nullable UUID diskId) {
        this.mDiskId = diskId;
    }

    public DocumentType getType() {
        return mType;
    }

    public void setType(DocumentType type) {
        this.mType = type;
    }

    public String getTitle() {
        return mTitle;
    }

    public void setTitle(String title) {
        this.mTitle = title;
    }

    public Boolean getIsAccessible() {
        return mIsAccessible;
    }

    public void setIsAccessible(Boolean isAccessible) {
        this.mIsAccessible = isAccessible;
    }

    @Nullable
    public String getLinkInfix() {
        return mLinkInfix;
    }

    public void setLinkInfix(@Nullable String linkInfix) {
        mLinkInfix = linkInfix;
    }

    public String getName() {
        return mName;
    }

    public void setName(String mName) {
        this.mName = mName;
    }

    public String getText() {
        return mText;
    }

    public void setText(String mText) {
        this.mText = mText;
    }

    @Nullable
    public String getSubtype() {
        return mSubtype;
    }

    public void setSubtype(@Nullable String mSubtype) {
        this.mSubtype = mSubtype;
    }

// KEEP METHODS - put your custom methods here

    public Document(Parcel in) {
        mId = in.readLong();
        mUuid = in.readString();
        mDocumentId = in.readString();
        mDiskId = (UUID) in.readSerializable();
        mType = DocumentType.fromValue(in.readInt());
        mTitle = in.readString();
        mIsAccessible = in.readInt() != 0;
        mLinkInfix = in.readString();
        mName = in.readString();
        mText = in.readString();
        mSubtype = in.readString();
    }

    public static final Creator<Document> CREATOR = new Creator<Document>() {
        @Override
        public Document createFromParcel(Parcel in) {
            return new Document(in);
        }

        @Override
        public Document[] newArray(int size) {
            return new Document[size];
        }
    };

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(mId);
        dest.writeString(mUuid);
        dest.writeString(mDocumentId);
        dest.writeSerializable(mDiskId);
        dest.writeInt(mType != null ? mType.ordinal() : DocumentType.UNKNOWN.ordinal());
        dest.writeString(mTitle);
        dest.writeInt(mIsAccessible != null && mIsAccessible ? 1 : 0);
        dest.writeString(mLinkInfix);
        dest.writeString(mName);
        dest.writeString(mText);
        dest.writeString(mSubtype);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Document document = (Document) o;

        if (mId != null ? !mId.equals(document.mId) : document.mId != null) {
            return false;
        }
        if (mUuid != null ? !mUuid.equals(document.mUuid) : document.mUuid != null) {
            return false;
        }
        if (mDocumentId != null ? !mDocumentId.equals(document.mDocumentId) : document.mDocumentId != null) {
            return false;
        }
        if (mDiskId != null ? !mDiskId.equals(document.mDiskId) : document.mDiskId != null) {
            return false;
        }
        if (mType != document.mType) {
            return false;
        }
        if (mTitle != null ? !mTitle.equals(document.mTitle) : document.mTitle != null) {
            return false;
        }
        if (mLinkInfix != null ? !mLinkInfix.equals(document.getLinkInfix()) : document.getLinkInfix() != null) {
            return false;
        }
        if (mName != null ? !mName.equals(document.mName) : document.mName != null) {
            return false;
        }
        if (mText != null ? !mText.equals(document.mText) : document.mText != null) {
            return false;
        }
        if (mSubtype != null ? !mSubtype.equals(document.mSubtype) : document.mSubtype != null) {
            return false;
        }
        return mIsAccessible != null ? mIsAccessible.equals(document.mIsAccessible) : document.mIsAccessible == null;

    }

    @Override
    public int hashCode() {
        int result = mId != null ? mId.hashCode() : 0;
        result = 31 * result + (mUuid != null ? mUuid.hashCode() : 0);
        result = 31 * result + (mDocumentId != null ? mDocumentId.hashCode() : 0);
        result = 31 * result + (mDiskId != null ? mDiskId.hashCode() : 0);
        result = 31 * result + (mType != null ? mType.hashCode() : 0);
        result = 31 * result + (mTitle != null ? mTitle.hashCode() : 0);
        result = 31 * result + (mIsAccessible != null ? mIsAccessible.hashCode() : 0);
        result = 31 * result + (mLinkInfix != null ? mLinkInfix.hashCode() : 0);
        result = 31 * result + (mName != null ? mName.hashCode() : 0);
        result = 31 * result + (mText != null ? mText.hashCode() : 0);
        result = 31 * result + (mSubtype != null ? mSubtype.hashCode() : 0);
        return result;
    }
    // KEEP METHODS END

}
